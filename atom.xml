<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>zacharytamas</title>
 <link href="http://blog.zacharytamas.me/atom.xml" rel="self"/>
 <link href="http://blog.zacharytamas.me/"/>
 <updated>2014-02-03T20:40:08-06:00</updated>
 <id>http://blog.zacharytamas.me</id>
 <author>
   <name>Zachary Jones</name>
   <email></email>
 </author>

 
 <entry>
   <title>How I Work: Coding</title>
   <link href="http://blog.zacharytamas.me/2014/01/20/how-i-work-coding/"/>
   <updated>2014-01-20T00:00:00-06:00</updated>
   <id>http://blog.zacharytamas.me/2014/01/20/how-i-work-coding</id>
   <content type="html">&lt;p&gt;My primary development tool is none other than &lt;a href=&quot;http://www.sublimetext.com/2&quot;&gt;Sublime Text 2&lt;/a&gt;. It is my goto text editor for most everything. For programming, I use it exclusively. I have a &lt;a href=&quot;http://www.jetbrains.com/pycharm/&quot;&gt;PyCharm&lt;/a&gt; license &lt;a href=&quot;/portfolio/lights-on/&quot;&gt;my employer&lt;/a&gt; bought my team but I could never get into it. Aside from programming, I use Sublime Text for basically everything else as well, including taking notes, drafting letters, making on-the-spot todo lists, etc. I&amp;#39;m even writing this post in Sublime Text right now using the Markdown format.&lt;/p&gt;

&lt;h3&gt;Plugins I Use&lt;/h3&gt;

&lt;p&gt;I use several plugins for Sublime Text to work better. A few of my favorites are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://sublime.wbond.net/&quot;&gt;Package Control&lt;/a&gt;&lt;/strong&gt;. Of course I have this. This allows for easily adding/removing plugins to Sublime Text. It&amp;#39;s the first thing you should add to a fresh Sublime installation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Backbone.js&lt;/strong&gt;. I&amp;#39;ve installed the Backbone.js plugin which has a lot of handy completions and snippets for writing &lt;code&gt;Backbone.js&lt;/code&gt; code faster. Includes both JavaScript and CoffeeScript!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/Xavura/CoffeeScript-Sublime-Plugin&quot;&gt;CoffeeScript&lt;/a&gt;&lt;/strong&gt;. I really love &lt;a href=&quot;http://coffeescript.org&quot;&gt;CoffeeScript&lt;/a&gt; and so adding Coffee support to Sublime Text is a must-have item. Primarily I use it for the syntax highlighting and a small portion of the completions that I actually use.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/clutchski/coffeelint&quot;&gt;CoffeeLint&lt;/a&gt;&lt;/strong&gt;. For linting the aforementioned Coffee.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/csscomb/CSScomb-for-Sublime&quot;&gt;CSScomb&lt;/a&gt;&lt;/strong&gt;. This handy gadget will &amp;quot;comb&amp;quot; your CSS (and also at least LESS, but probably SASS, too) files, reordering your style properties into a consistent ordering. I like to run this occasionally to keep things neat.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/squ1b3r/Djaneiro&quot;&gt;Djaneiro&lt;/a&gt;&lt;/strong&gt;. This is a must-have for &lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt; developers using Sublime. It adds a TON of completions, snippets, and syntaxes to Sublime. These make it really easy to rapidly write boilerplate Django things like model fields, form fields, and Django template tags/filters.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/spadgos/sublime-jsdocs&quot;&gt;DocBlockr&lt;/a&gt;&lt;/strong&gt;. DocBlockr makes it really easy to write JavaDoc-style documentation as comments for various languages. I&amp;#39;ve lately been fond of the lightweight &lt;a href=&quot;http://jashkenas.github.io/docco/&quot;&gt;Docco&lt;/a&gt; for generating JavaScript documentation (my primary language these days), but on occasion at work on legacy code I&amp;#39;ll use JSDoc format. DocBlockr is handy for that.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/sergeche/emmet-sublime&quot;&gt;Emmet&lt;/a&gt;&lt;/strong&gt;. Your HTML markup writing shotgun. Lets you rapidly generate HTML markup with minimal keystrokes. If you&amp;#39;re not using it you&amp;#39;re not productive.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Jasmine&lt;/strong&gt;. I like writing tests for my JavaScript using &lt;a href=&quot;http://jasmine.github.io/&quot;&gt;Jasmine&lt;/a&gt; and this plugin just adds common completions to expedite the process of writing all the nested functions that Jasmine is known for.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/danro/LESS-sublime&quot;&gt;LESS&lt;/a&gt;&lt;/strong&gt;. I&amp;#39;m not particularly against &lt;a href=&quot;http://sass-lang.com/&quot;&gt;SASS&lt;/a&gt;, but I&amp;#39;ve just always used &lt;a href=&quot;http://www.lesscss.org/&quot;&gt;LESS&lt;/a&gt; and so that&amp;#39;s what I prefer to write in since I&amp;#39;m familiar.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/SublimeLinter/SublimeLinter&quot;&gt;SublimeLinter&lt;/a&gt;&lt;/strong&gt;. Probably the most important plugin I have. This helps identify bad/questionable code throughout a whole bunch of languages. You should never professionally develop software these days without a linter.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;My Sublime workspace&lt;/h3&gt;

&lt;p&gt;I&amp;#39;m currently using the &lt;a href=&quot;http://kkga.github.io/spacegray/&quot;&gt;Spacegray theme&lt;/a&gt; for Sublime, which I really like quite a bit. I&amp;#39;m going through this minimalism phase lately and it&amp;#39;s quite pleasing to that end.&lt;/p&gt;

&lt;div class=&quot;pullout image&quot;&gt;
  &lt;img src=&quot;/public/posts/how-i-work-part-1/sublime-screenshot.jpg&quot; alt=&quot;My window writing this post. Recursion?&quot; width=&quot;100%&quot;&gt;
  &lt;p class=&quot;caption&quot;&gt;My window writing this post. Recursion?&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;When I&amp;#39;m really in the zone and familiar with the codebase, I&amp;#39;ll hide the sidebar altogether and work with just the currently open file. Using Sublime&amp;#39;s &lt;em&gt;awesome&lt;/em&gt; &lt;code&gt;Goto Anything...&lt;/code&gt; feature you can easily hop between files in the codebase if you&amp;#39;re familiar enough. I like doing this as it&amp;#39;s faster than searching through the sidebar manually.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Annual Goals</title>
   <link href="http://blog.zacharytamas.me/2014/01/12/annual-goals/"/>
   <updated>2014-01-12T00:00:00-06:00</updated>
   <id>http://blog.zacharytamas.me/2014/01/12/annual-goals</id>
   <content type="html">&lt;p&gt;I&amp;#39;m not really one to set &amp;quot;resolutions&amp;quot; for a new year, but I do however set high-level goals for what I&amp;#39;d like to accomplish during a year. I try to be general but yet still specific in doing this.&lt;/p&gt;

&lt;p&gt;My goal for 2013 was:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To create remarkable, interactive user experiences with&amp;nbsp;JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;#39;m pleased to say that I knocked this goal out of the park. See, I avoided JavaScript for years because my first attempt at learning it was all wrong. The extent of my JavaScript usage was enough to implement a jQuery plugin I found online, but I avoided too much more than that.&lt;/p&gt;

&lt;p&gt;JavaScript is a very flexible language that lets you do almost anything&amp;mdash;and it&amp;#39;s this fact that can make it a very intimidating language for someone like me who prefers to learn things the &amp;quot;right way&amp;quot;. With so many ways of doing the same thing, which do you do? Is there a right way to do this? Probably, but which way is it? I don&amp;#39;t know, I&amp;#39;m just learning this language... &lt;em&gt;eek&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I eventually learned that the reason JavaScript can be so intimidating is that it&amp;#39;s not just JavaScript: you have to understand HTML/CSS, the DOM, the browser event loop, and so on &lt;em&gt;ad nauseam&lt;/em&gt;. I resolved to spend 2013 learning how all of these concepts fit together and to use that knowledge to confidently engineer applications that I didn&amp;#39;t fear were &amp;quot;all wrong&amp;quot;.&lt;/p&gt;

&lt;p&gt;In 2013 I built countless small projects in JavaScript using various frameworks (Ember.js, Angular.js, Backbone.js, Meteor.js) just to comprehensively learn the language in an agnostic way (by playing with so many different styles of organizing project). I also was able to then go prime time and build three major JavaScript projects with full test suites and fully maintainable codebases.&lt;/p&gt;

&lt;p&gt;This past year of personal development has been very fulfilling and I&amp;#39;ve found a new love for front-end development that I hope to continue to cultivate through 2014, which leads me to...&lt;/p&gt;

&lt;h2&gt;2014 Annual Goal&lt;/h2&gt;

&lt;p&gt;My goal for this year is a complementary course correction from last year&amp;#39;s.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To own the entire creative process, comprehensively designing and developing interactive digital products.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Design is a latent talent I&amp;#39;ve always wished to have time to develop and thus is my goal for this year. This very website is a part of this goal: having designed, implemented, and written the copy over the course of a week. I&amp;#39;m sure it will iteratively get better throughout the year, but as an exercise over a week&amp;#39;s worth of nights, I am very pleased with what I&amp;#39;ve accomplished.&lt;/p&gt;

&lt;p&gt;So come along, let&amp;#39;s all hone our crafts and do even better work this year.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ES6 Arrow Functions</title>
   <link href="http://blog.zacharytamas.me/2014/01/02/es6-arrow-functions/"/>
   <updated>2014-01-02T00:00:00-06:00</updated>
   <id>http://blog.zacharytamas.me/2014/01/02/es6-arrow-functions</id>
   <content type="html">&lt;p&gt;Just noticed earlier today that in Firefox version 22 and above ECMASCript 6&amp;#39;s &lt;a href=&quot;&quot;&gt;CoffeeScript&lt;/a&gt;-style arrow functions are available:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/posts/arrow-functions-firefox/console.png&quot; width=&quot;100%&quot;&gt;&lt;/p&gt;

&lt;p&gt;It&amp;#39;s interesting seeing how they&amp;#39;re fitting this Coffee concept into the confines of the JavaScript spec.&lt;/p&gt;

&lt;p&gt;Of course Coffee uses indentation to denote blocks and JavaScript explicitly requires braces for blocks of longer than one statement, so although we are getting the arrow syntax in ES6 we&amp;#39;ll never get this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;coffeescript&quot;&gt;  &lt;span class=&quot;nv&quot;&gt;sayHello = &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;(person) =&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;output = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Hello &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But this current compromise is enough to not fight too much over:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;They are only taking the fat-arrow functionality from Coffee, however, so these arrow functions are always using lexical &lt;code&gt;this&lt;/code&gt; which is nice in cases where you need &lt;code&gt;this&lt;/code&gt; in your function to refer to the &lt;code&gt;this&lt;/code&gt; in scope when the function was defined&amp;mdash;not where it was called.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Old way:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// If we said just `this` below it would not necessary&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// refer to what we expected. By making a closed over&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// variable called `_this` we can specifically state&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// what we want.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// New way:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;CoffeeScript has two different arrow operators for this purpose: &lt;code&gt;-&amp;gt;&lt;/code&gt; which is the standard way where &lt;code&gt;this&lt;/code&gt; is dependent on calling context, and the &amp;quot;fat arrow&amp;quot; &lt;code&gt;=&amp;gt;&lt;/code&gt; version which provides lexical &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Optional parenthesis&lt;/h3&gt;

&lt;p&gt;In Coffee, the parenthesis are optional if-and-only-if the function requires no arguments. This style is convenient because combined with Coffee&amp;#39;s optional parenthesis on function invocation you can very lightweight syntax for common things like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;doStuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If the function you&amp;#39;re defining accepts named arguments at all, you must provide the parens:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nv&quot;&gt;add = &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;(a, b) -&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In ECMAScript 6 arrow functions, for some reason, the parens are optional when the function accepts &lt;em&gt;only one&lt;/em&gt; named argument, and are required for all other cases&amp;mdash;including when no arguments are declared.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Parens required.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Parens not required because only one argument is declared.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Parens required for no arguments&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Ruff!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This seems odd and error-prone. By making the parens optional only on the case of one named argument, you really aren&amp;#39;t saving me much at all. In fact, I think without them there makes it even more confusing looking: &lt;em&gt;why is this identifier here? Where did I declare this? Oh, I&amp;#39;m declaring it right now.&lt;/em&gt; On the other side, having a pair of empty parens makes me feel like I have leftover cruft from a refactor until I look after it and see the &lt;code&gt;=&amp;gt;&lt;/code&gt; and think &lt;em&gt;Ah, this is a function.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Implicit return&lt;/h3&gt;

&lt;p&gt;Another slight quirk: you may have noticed the case where my ES6 arrow-function didn&amp;#39;t have a return statement. If you&amp;#39;re familiar with Ruby, Coffee, or other such languages, you may be familiar with this implicit return of the last expression evaluated. Don&amp;#39;t be fooled however, this rule only applies to arrow functions that are only one expression.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// this return is required&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// no return required&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;

&lt;h2&gt;We So Excited&lt;/h2&gt;

&lt;p&gt;All in all, though, I&amp;#39;m excited to see some of the things coming in ES6. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/ECMAScript_6_support_in_Mozilla&quot;&gt;Mozilla seems to be leading the pack&lt;/a&gt; of implementing features as soon as they reach &lt;a href=&quot;http://www.ecma-international.org/memento/TC39.htm&quot;&gt;TC39&lt;/a&gt; consensus which is very exciting. It feels like there&amp;#39;s a pretty bright future ahead for JavaScript as the community is finally starting to take it seriously in the past several years.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; If you&amp;#39;d like to use ES6 arrow functions now you can play around with Square&amp;#39;s &lt;code&gt;es6-arrow-function&lt;/code&gt; &lt;a href=&quot;https://github.com/square/es6-arrow-function&quot;&gt;project from Github&lt;/a&gt;. Seems like you could include it in your Grunt build process to extrapolate arrow functions you write in your code into their ES5 equivalents.&lt;/p&gt;
</content>
 </entry>
 

</feed>
